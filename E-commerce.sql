-- Basic Queries
-- 1. List all unique cities where customers are located.

SELECT DISTINCT
    customer_city
FROM
    CUSTOMERS;

-- 2. Count the number of orders placed in 2017.

 SELECT 
    COUNT(order_id)
FROM
    ORDERS
WHERE
    YEAR(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category.

SELECT 
    UPPER(P.product_category) AS CATEGORY,
    ROUND(SUM(Y.payment_value), 2) AS SALES
FROM
    ORDER_ITEMS I
        JOIN
    PRODUCTS P ON I.product_id = P.product_id
        JOIN
    PAYMENTS Y ON I.ORDER_ID = Y.ORDER_ID
GROUP BY P.product_category;

-- 4. Calculate the percentage of orders that were paid in installments.

SELECT 
    SUM(CASE
        WHEN payment_installments >= 1 THEN 1
        ELSE 0
    END) * 100 / COUNT(*) AS EMI_PER
FROM
    PAYMENTS;

-- 5. Count the number of customers from each state. 

SELECT 
    CUSTOMER_STATE, COUNT(CUSTOMER_STATE) AS NO_OF_CUSTOMERS
FROM
    CUSTOMERS
GROUP BY CUSTOMER_STATE;

-- Intermediate Queries

-- 1. Calculate the number of orders per month in 2018.

SELECT 
    MONTHNAME(order_purchase_timestamp) AS MONTHS,
    COUNT(ORDER_ID) AS ORDERS_COUNT
FROM
    ORDERS
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY MONTHNAME(order_purchase_timestamp)
ORDER BY ORDERS_COUNT DESC;

-- 2. Find the average number of products per order, grouped by customer city.

SELECT 
    A.CUSTOMER_CITY,
    ROUND(AVG(PROD_COUNT), 2) AS PROD_COUNT_PER_ORDER
FROM
    (SELECT 
        C.customer_city,
            O.order_id,
            COUNT(I.product_id) AS PROD_COUNT
    FROM
        CUSTOMERS C
    JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
    JOIN ORDER_ITEMS I ON I.order_id = O.order_id
    GROUP BY C.customer_city , O.order_id) A
GROUP BY A.CUSTOMER_CITY
ORDER BY PROD_COUNT_PER_ORDER DESC;

-- 3. Calculate the percentage of total revenue contributed by each product category.


SELECT 
    UPPER(P.product_category) AS CATEGORY,
   Round((SUM(Y.payment_value)/(SELECT sum(Y.payment_value) FROM PAYMENTS Y))*100,2) AS SALES_PER
FROM
    ORDER_ITEMS I
        JOIN
    PRODUCTS P ON I.product_id = P.product_id
        JOIN
    PAYMENTS Y ON I.ORDER_ID = Y.ORDER_ID
GROUP BY P.product_category
ORDER BY SALES_PER DESC;

-- 4. Identify the correlation between product price and the number of times a product has been purchased.

SELECT
    product_id, price, COUNT(product_id) AS product_count
FROM
    order_items
GROUP BY product_id , price
ORDER BY product_count DESC;

-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.

SELECT a.* , rank() over(order by revenue desc) rnk
from (select seller_id, round(sum(payment_value),2) as revenue
from order_items I
join payments P on I.order_id = P.order_id
group by seller_id
order by revenue desc) a;

-- Advanced Queries
-- 1. Calculate the moving average of order values for each customer over their order history.

SELECT a.customer_id, a.order_purchase_timestamp, a.payment_Value,
round(avg(a.payment_value) over(partition by a.customer_id order by a.order_purchase_timestamp
rows between 2 preceding and current row),2) as mov_avg
from (SELECT O.customer_id, O.order_purchase_timestamp, P.payment_value
FROM ORDERS O
JOIN PAYMENTS P
ON O.ORDER_ID = P.ORDER_ID) a;

-- 2. Calculate the cumulative sales per month for each year.

SELECT A.*, ROUND(SUM(A.SALES) OVER(partition by A.YY order by A.MM),2) CUM_SALES
FROM (SELECT YEAR(O.order_purchase_timestamp) AS YY , MONTH(O.order_purchase_timestamp) AS MM , ROUND(SUM(P.payment_value),2) AS SALES
FROM ORDERS O
JOIN PAYMENTS P ON O.ORDER_ID = P.ORDER_ID
GROUP BY YEAR(O.order_purchase_timestamp), MONTH(O.order_purchase_timestamp)
ORDER BY YEAR(O.order_purchase_timestamp), MONTH(O.order_purchase_timestamp)) A;

-- 3. Calculate the year-over-year growth rate of total sales.

SELECT B.*, ROUND((SALES-PRE_YY)*100/PRE_YY,2) AS GROWTH_RATE
FROM (SELECT A.*, lag(sales,1) over(order by YY) as PRE_YY
FROM (SELECT YEAR(O.order_purchase_timestamp) AS YY , ROUND(SUM(P.payment_value),2) AS SALES
FROM ORDERS O
JOIN PAYMENTS P ON O.ORDER_ID = P.ORDER_ID
GROUP BY YEAR(O.order_purchase_timestamp)
ORDER BY YEAR(O.order_purchase_timestamp)) A) B;


-- 4. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.

WITH A AS (SELECT 
    C.CUSTOMER_ID,
    MIN(O.ORDER_PURCHASE_TIMESTAMP) AS FIRST_ORDER
FROM
    ORDERS O
        JOIN
    CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID),

B AS (SELECT 
    A.CUSTOMER_ID, COUNT(DISTINCT O.ORDER_PURCHASE_TIMESTAMP)
FROM
    A
        JOIN
    ORDERS O ON O.CUSTOMER_ID = A.CUSTOMER_ID
    AND O.ORDER_PURCHASE_TIMESTAMP > A.FIRST_ORDER
    AND O.ORDER_PURCHASE_TIMESTAMP < date_add(FIRST_ORDER, interval 6 MONTH)
    GROUP BY A.CUSTOMER_ID)
    
    SELECT COUNT(DISTINCT A.CUSTOMER_ID)*100/COUNT(DISTINCT B.CUSTOMER_iD) AS RETENTION_PER
    FROM A LEFT JOIN B
    ON A.CUSTOMER_ID = B.CUSTOMER_ID;


-- 5. Identify the top 3 customers who spent the most money in each year.

SELECT B.*
FROM (SELECT A.YR, A.CUSTOMER_ID, A.MONEY_SPENT, RANK() OVER(partition by A.YR ORDER BY MONEY_SPENT DESC) RNK
FROM (SELECT  YEAR(O.order_purchase_timestamp) AS YR, O.CUSTOMER_ID, SUM(P.PAYMENT_VALUE) AS MONEY_SPENT 
FROM PAYMENTS P
JOIN ORDERS O ON O.ORDER_ID= P.ORDER_ID
GROUP BY YEAR(O.order_purchase_timestamp), O.CUSTOMER_ID
ORDER BY YR ASC, MONEY_SPENT DESC) A) B
WHERE RNK =1;
